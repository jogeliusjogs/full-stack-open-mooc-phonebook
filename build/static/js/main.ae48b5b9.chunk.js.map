{"version":3,"sources":["services/persons.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","props","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","PersonForm","onSubmit","addPerson","value","newName","onChange","handleNameInputChange","newNumber","handleNumberInputChange","type","Filter","nameFilter","handleNameFilterChange","Person","name","number","onClick","window","confirm","removePerson","Persons","persons","map","person","personNameLowerCase","toLocaleLowerCase","nameFilterLowerCase","indexOf","key","App","useState","setPersons","setNewName","setNewNumber","setNameFilter","notificationMessage","setNotificationMessage","useEffect","personService","timeoutNotificationMessage","setTimeout","event","target","preventDefault","newPersonObject","existingPersonWithSameNameIndex","findIndex","localeCompare","returnedPerson","concat","catch","error","console","log","updatedPerson","personsUpdated","index","personsCopy","removedPersonName","splice","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae48b5b9.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data) \n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './../services/persons'\n\nconst Notification = (props) => {\n  const notificationStyle = {\n    color: 'green',\n    background: 'lightgrey',\n    fontSize: 16,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n  if (props.message === null || props.message === '') {\n    return null\n  }\n\n  return (\n    <div style={notificationStyle}>\n      {props.message}\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameInputChange}></input>\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberInputChange}></input>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with: <input value={props.nameFilter} onChange={props.handleNameFilterChange}></input>\n    </div>\n  )\n}\n\nconst Person = (props) => {\n  const removePersonOnConfirm = () => {\n    let result = window.confirm('Delete ' + props.name + ' ?')\n    if (result) {\n      props.removePerson(props.id)\n    }\n  }\n  return (\n    <div>\n      <p>{props.name} {props.number}</p><button onClick={() => removePersonOnConfirm()}>delete</button>\n    </div>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    props.persons.map(person => {\n      let personNameLowerCase = person.name.toLocaleLowerCase()\n      let nameFilterLowerCase = props.nameFilter.toLocaleLowerCase()\n\n      if (personNameLowerCase.indexOf(nameFilterLowerCase) >= 0) {\n        return (\n          <Person key={person.id} id={person.id} name={person.name} number={person.number} removePerson={props.removePerson}/>\n        )\n      }\n      return (null)\n    })\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter] = useState('')\n  const [ notificationMessage, setNotificationMessage] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response)\n      })\n  }, [])\n\n  const timeoutNotificationMessage = () => {\n    setTimeout(() => {\n      setNotificationMessage(null)\n    }, 5000)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const newPersonObject = {name : newName, number : newNumber}\n    let existingPersonWithSameNameIndex = persons.findIndex(person =>\n       person.name.localeCompare(newPersonObject.name) === 0)\n    if (existingPersonWithSameNameIndex < 0) {\n      personService\n        .create(newPersonObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotificationMessage('Added ' + returnedPerson.name)\n          timeoutNotificationMessage()\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          setNotificationMessage(error.response.data.error)\n          timeoutNotificationMessage()\n        })\n    } else {\n      let replaceOldPhoneNumber = window.confirm(newName + ' is already added to phonebook, replace the old number with a new one?')\n      if (replaceOldPhoneNumber) {\n        personService\n          .update(persons[existingPersonWithSameNameIndex].id, newPersonObject)\n          .then(updatedPerson => {\n            let personsUpdated = [...persons]\n            personsUpdated[existingPersonWithSameNameIndex] = updatedPerson\n            setPersons(personsUpdated)\n            setNewName('')\n            setNewNumber('')\n            setNotificationMessage('Updated phone number for ' + updatedPerson.name)\n            timeoutNotificationMessage()\n          })\n      }\n    }\n  }\n\n  const removePerson = (id) => {\n    let index = persons.findIndex(person => person.id === id);\n    personService\n      .remove(id)\n      .then(response => {  \n        if (index > -1) {\n          let personsCopy = [...persons]\n          let removedPersonName = personsCopy[index].name\n          personsCopy.splice(index, 1)\n          setPersons(personsCopy);\n          setNotificationMessage('Removed ' + removedPersonName)\n          timeoutNotificationMessage()\n        }\n    })\n      .catch(error => {\n          setNotificationMessage('Information of ' + persons[index].name + ' has already been removed from the server')\n          timeoutNotificationMessage()\n          setPersons(persons.filter(person => person.id !== id))\n      })\n  }\n\n  const handleNameInputChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberInputChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage}/>\n      <Filter nameFilter={nameFilter} handleNameFilterChange={handleNameFilterChange}/>\n      <h3>add a new</h3>\n      <PersonForm \n          addPerson={addPerson}\n          newName={newName}\n          handleNameInputChange={handleNameInputChange}\n          newNumber={newNumber}\n          handleNumberInputChange={handleNumberInputChange}/>\n      <h3>Numbers</h3>\n      <Persons persons={persons} nameFilter={nameFilter} removePerson={removePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}